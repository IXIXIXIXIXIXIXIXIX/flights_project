(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "../utils", "../fetch"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.autosuggest = void 0;
    var utils_1 = require("../utils");
    var fetch_1 = require("../fetch");
    exports.autosuggest = function (input, options, signal) {
        var requestOptions = { input: input };
        if (options !== undefined) {
            if (options.nResults !== undefined) {
                requestOptions["n-results"] = options.nResults.toString();
            }
            if (options.focus !== undefined) {
                requestOptions["focus"] = utils_1.coordinatesToString(options.focus);
            }
            if (options.nFocusResults !== undefined) {
                requestOptions["n-focus-results"] = options.nFocusResults.toString();
            }
            if (options.clipToCountry !== undefined &&
                Array.isArray(options.clipToCountry) &&
                options.clipToCountry.length > 0) {
                requestOptions["clip-to-country"] = utils_1.arrayToString(options.clipToCountry);
            }
            if (options.clipToBoundingBox !== undefined) {
                requestOptions["clip-to-bounding-box"] = utils_1.boundsToString(options.clipToBoundingBox);
            }
            if (options.clipToCircle !== undefined) {
                requestOptions["clip-to-circle"] = utils_1.coordinatesToString(options.clipToCircle.center) + "," + options.clipToCircle.radius;
            }
            if (options.clipToPolygon !== undefined) {
                requestOptions["clip-to-polygon"] = utils_1.arrayToString(options.clipToPolygon);
            }
            if (options.inputType !== undefined) {
                requestOptions["input-type"] = options.inputType;
            }
            if (options.language !== undefined) {
                requestOptions["language"] = options.language;
            }
            if (options.preferLand !== undefined) {
                requestOptions["prefer-land"] = options.preferLand.toString();
            }
        }
        return fetch_1.fetchGet("autosuggest", requestOptions, signal);
    };
});
