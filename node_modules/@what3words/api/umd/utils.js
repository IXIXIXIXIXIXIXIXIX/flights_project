var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getPlatform = exports.getOptions = exports.setOptions = exports.arrayToString = exports.boundsToString = exports.coordinatesToString = exports.searchParams = exports.GLOBAL_OPTIONS = void 0;
    exports.GLOBAL_OPTIONS = {
        key: "",
        baseUrl: "https://api.what3words.com/v3"
    };
    exports.searchParams = function (data) {
        return Object.keys(data)
            .map(function (key) { return encodeURIComponent(key) + "=" + encodeURIComponent(data[key]); })
            .join("&");
    };
    exports.coordinatesToString = function (coordinates) {
        return coordinates.lat + "," + coordinates.lng;
    };
    exports.boundsToString = function (bounds) {
        return exports.coordinatesToString(bounds.southwest) + "," + exports.coordinatesToString(bounds.northeast);
    };
    exports.arrayToString = function (array) {
        return array.join(",");
    };
    exports.setOptions = function (options) {
        exports.GLOBAL_OPTIONS = __assign(__assign({}, exports.GLOBAL_OPTIONS), options);
    };
    exports.getOptions = function () { return exports.GLOBAL_OPTIONS; };
    exports.getPlatform = function (platform) {
        switch (platform) {
            case 'darwin':
                return 'Mac OS X';
            case 'win32':
                return 'Windows';
            case 'linux':
                return 'Linux';
            default:
                return "";
        }
    };
});
